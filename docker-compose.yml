version: '3.8'

  # ===================================================================================
  # MONGODB DATABASE
  # ===================================================================================
services:
  mongo:
    image: mongo
    volumes:
      - "mongodb:/data/db"
    ports:
      - "27017:27017"
    expose:
      - 27017
    networks:
      - flask-network
  # ===================================================================================
  # MAIN DATABASE
  # ===================================================================================
  mysql:
    image: mysql:latest
    volumes:
      - mysql:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_1
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3307
    ports:
      - '3307:3307'
    expose:
      - 3307
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flask-network

  # ===================================================================================
  # TEST DATABASE
  # ===================================================================================
  mysql_test:
    image: mysql:latest
    volumes:
      - mysql_test:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: db_test
      MYSQL_USER: user
      MYSQL_PASSWORD: user1234
      MYSQL_TCP_PORT: 3308
    ports:
      - '3308:3308'
    expose:
      - 3308
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
    networks:
      - flask-network

  # ===================================================================================
  # NGINX CONFIGURATION
  # ===================================================================================
  nginx:
    image: nginx:latest
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - '80:80'
    networks:
      - flask-network
    depends_on:
      - flask

  # ===================================================================================
  # WEB APP
  # ===================================================================================
  flask:
    build:
      context: .
      dockerfile: Dockerfile

    command: gunicorn --bind 0.0.0.0:8000 --workers 6 'app.create_app:main()' --reload
    volumes:
      - ./:/webapp

    depends_on:
      mongo:
        condition: service_started
      mysql:
        condition: service_healthy
      mysql_test:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      flask-network:
        aliases:
          - flask-app

volumes:
  mongodb:
  mysql:
  mysql_test:

networks:
  flask-network: